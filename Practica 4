#lang plai
(require "practica4-base.rkt")

#|
--------------------------------
|  Lenguajes de programación     |
|  Práctica 4                    |
|Guerrero Chávez Diana Lucía   |
|Lázaro Arias Jorge Alberto      |
|Sánchez Alcántara Jesús Esteban|
---------------------------------
|#


#|
EJERCICIO 1
desugar Define una función que toma una expresión en sintaxis FAES y que regresa una expresión en
sintaxis FAE.
|#
(define (desugar expr)
  (type-case FAES expr
    [numS (n) (num n)]
    [addS (l r) (add (desugar l)
                     (desugar r))]
    [subS (l r) (sub (desugar l)
                     (desugar r))]
    [withS (id named body) (app (fun id (desugar body))
                                (desugar named))]
    [idS (s) (id s)]
    [funS (p b) (fun p (desugar b))]
    [appS (f e) (app (desugar f)
                     (desugar e))]))
                     
                     
  #|
EJERCICIO 2
multi-param  Adecua el interp de tal manera que las funciones acepten una lista de parámetros y
que las aplicaciones de funciones sean de múltiples argumentos.
|#


#|
EJERCICIO 3
with*  Adecua a desugar de tal manera que se tenga expresiones with* que tienen la misma semántica
de let* de Racket, en donde cada named-expr es evaluada una a una y se crea inmediatamente el binding
con el valor obtenido
|#


#|
EJERCICIO 4
interp En base al código de p4-base.rkt, implementar el intérprete, dado un árbol de sintaxis
abstracta, evaluar y regresar un valor de tipo FAE-Value que considera las variantes numV y closureV. closureV
es el constructor de tipo que recibe un parámetro, tiene un cuerpo de tipo FAE y un ambiente de tipo Env.
Env considera las variantes de tipo mtSub y aSub, donde el constructor aSub recibe un símbolo, un valor de
tipo FAE-Value y otro ambiente Env.
|#
