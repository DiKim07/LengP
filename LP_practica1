#lang plai

#|
Pow eleva un numero z a la potencia w
|#
(define (pow z w)
  (if (= w 0)
      1
      (* z (pow z (- w 1)))))

(test (pow 2 3)8)
(test (pow 7 3)343)
(test (pow 2 0)1)
(test (pow 2 1)2)
(test (pow 3 3)27)

#|
Devuelve una lista con los numeros primos del 2 ...n
Esta función utiliza las funciones auxiliares
*lista-hasta que genera una lista desde un numero dado hasta el número 2
*reverse, genera el reverso de una lista
*evalua-lista 
*dividir
*es-primo?
NOTA: las pruebas para esta función están después de la función es-primo?

|#
(define (primes n)
  (evalua-lista (reverse(lista-hasta n))) )


;;crea una lista desde x hasta 2
(define (lista-hasta x)
   (if (= x 1)
      '() 
      (cons x (lista-hasta (- x 1)))))

;;utiliza la función es-primo? para evaluar a cáda elemento de una lista de enteros
;;si ese elemento es primo, se agrega a la lista resultante
(define evalua-lista (lambda (lista)
                 (if (and(list? lista)
                         (andmap integer? lista))
                     (filter (lambda (x)
                               (es-primo? x ))
                             lista)
                     "Error se necesita una lista de numeros enteros")))


#|Verifica si un número es primo
al principio de la llamada esta funcion debe recibir un
número para evaluar y una constante 2 esto es para comenzar a verificar los modulos:
ejemplo: n%2 -->inicio de la iteración
n%3 ---> segunda iteracion
...
n % n-1
El caso base es cuando el divisor es igual al dividendo
|#
(define (dividir a b)
  (cond
    [(= a b) #t];;llegamos al "final" de la iteración, devolvemos true 
    [(eq? (modulo a b) 0) #f ] ;;si a%b == 0 no es número primo devolvemos false
    [else (dividir a (+ b 1))]));;llamada recursiva aumentamos en uno el divisor (b)
    
#|Regresa true cuando un numero es primo y false en caso contrario
llama a la funcion dividir pasándole como parámetros el número a
evaluar y una constante 2 
|#
(define (es-primo? n)
  (cond
    [(dividir n 2) #t]
    [else #f]))
  

;Pruebas para la función primes
(test (primes 10) '(2 3 5 7))
(test (primes 1) '())
(test (primes 5) '(2 3 5))
(test (primes 30) '(2 3 5 7 11 13 17 19 23 29))
(test (primes 7) '(2 3 5 7))